#summary nidaqmx API Users Guide
#labels Phase-Implementation

= Overview =

See also auto-generated [http://pylibnidaqmx.googlecode.com/svn/trunk/apidocs/index.html API documentation of nidaqmx].

The `nidaqmx` Python package provides 6 classes to create
NIDAQmx tasks:

  * AnalogInputTask
  * AnalogOutputTask
  * DigitalInputTask
  * DigitalOutputTask
  * CounterInputTask
  * CounterOutputTask

The base class for these classes is `Task` that implements the following methods:

State related methods:
  * start()
  * stop()
  * is_done() 
  * alter_state(state=start|stop|verify|commit|reserve|unreserve|abort)
  * wait_until_done(timeout=-1)

Defining callback methods:
  * register_every_n_samples_event(func,samples=1,options=0|sync,cb_data=None)
  * register_done_event(func,options=,cb_data=)
  * register_signal_event(func,signal=sample_clock|sample_complete|change_detection|counter_output,options=,cb_data)

Timing methods:
  * configure_timing_handchaking(sample_mode=,samples_per_channel=)
  * configure_timing_implicit(sample_mode=,samples_per_channel=)
  * configure_timing_change_detection(rising_edge_channel=,falling_edge_channel=,sample_mode=,samples_per_channel=)
  * configure_timing_sample_clock(source=OnboardClock,rate=1,active_edge=rising|falling,sample_mode=finite|continuous|hwtimed,samples_per_channel=)

Triggering methods:
  * configure_trigger_analog_edge_start(source, slope=rising|falling,level=)
  * configure_trigger_analog_window_start(source, when=entering|leaving,top=,bottom=)
  * configure_trigger_digital_edge_start(source, edge=rising|falling)
  * configure_trigger_digital_pattern_start(source, pattern, when=matches|does_not_match)
  * configure_trigger_disable_start()

Various setter/getter/resetter methods:
  * set_buffer(samples_per_channel)
  * set/get/reset_buffer_size(sz//)
  * set/get/reset_max(channel_name,value//)
  * set/get/reset_min(channel_name,value//)
  * get_low/high/gain/measurement_type/units/auto_zero_mode/data_transfer_mechanism(channel_name)
  * set/get/reset_regeneration(bool//)
  * set/get/reset_arm_start_trigger(trigger_type=digital_edge//)

  * set_arm_start_trigger_source(source)
  * set_arm_start_trigger_edge(edge=rising|falling)

  * set_pause_trigger(trigger_type=analog_level|analog_window|digital_level)
  * set_pause_trigger_source(source)
  * set_pause_trigger_when(when=above|below|inside|outside|high|low)

AnalogInput/OutputTask methods:
  * create_voltage_channel(phys_channel,channel_name=,terminal=default|rse|nrse|diff|pseudodiff,min_val=,max_val=,units=volts|custom,custom_scale_name=)
  * read(samples_per_channel=,timeout=10,fill_mode=group_by_scan_number|group_by_channel) -> data
  * write(data, auto_start=True,timeout=10,layout=group_by_scan_number|group_by_channel)

DigitalInput/OutputTask methods:
  * create_channel(lines, name=, grouping=per_line|for_all_lines)
  * read(samples_per_channel=,timeout=10,fill_mode=group_by_scan_number|group_by_channel) -> data, bytes_per_sample
  * write(data,auto_start=True,timeout=10,layout=group_by_scan_number|group_by_channel)

CounterInput/OutputTask methods:
  * create_channel_count_edges(counter,name=,edge=rising|falling,init=0,direction=up|down|ext)
  * set_terminal_count_edges(channel, terminal)
  * create_channel_frequency(counter,name=,units=hertz,idle_state=low|high,delay=0,freq=1,duty_cycle=0.5)
  * create_channel_ticks(counter,name=,source=,idle_state=low|high,delay=0,low_ticks=1,high_ticks=1)
  * create_channel_time(counter,name=,units=seconds,idle_state=low|high,delay=0,low_time=1,high_time=1)
  * set_terminal_pulse(channel, terminal)